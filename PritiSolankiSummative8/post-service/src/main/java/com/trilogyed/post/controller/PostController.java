package com.trilogyed.post.controller;

import com.trilogyed.post.dao.PostDao;
import com.trilogyed.post.model.Post;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.util.List;

@RestController
public class PostController {

    @Autowired
    PostDao postDao;


//    Create Post
//    ===========
//    URI: /posts
//    HTTP Method: POST
//    RequestBody: Post data (minus ID)
//    ResponseBody: Post data (including autogenerated ID)

    @RequestMapping(value = "/posts", method = RequestMethod.POST)
    @ResponseStatus(HttpStatus.CREATED)
    public Post createPost(@RequestBody @Valid Post post) {
        return postDao.addPost(post);
    }

//    Get Post
//    ========
//    URI: /posts/{id}
//    HTTP Method: GET
//    RequestBody: None
//    ResponseBody: Post data

    @RequestMapping(value = "/posts/{id}", method = RequestMethod.GET)
    @ResponseStatus(HttpStatus.OK)
    public Post getPost(@PathVariable("id") int postID) {
        Post post = postDao.getPost(postID);
        if (post == null)
            throw new IllegalArgumentException("Post does not exist for id " + postID);
        return post;
    }

    @GetMapping
    @RequestMapping(value = "/posts", method = RequestMethod.GET)
    @ResponseStatus(HttpStatus.OK)
    public List<Post> getAllPosts() {
        return postDao.getAllPosts();
    }


    @RequestMapping(value = "/posts/{id}", method = RequestMethod.PUT)
    @ResponseStatus(HttpStatus.NO_CONTENT)
    public void updatePost(@RequestBody @Valid Post post, @PathVariable("id") int postID) {
        if (post.getPostID() == 0)
            post.setPostID(postID);
        if (postID != post.getPostID()) {
            throw new IllegalArgumentException("Post ID provided not available" + postID);
        }
        postDao.updatePost(post);
    }

    @RequestMapping(value = "/posts/{id}", method = RequestMethod.DELETE)
    @ResponseStatus(HttpStatus.NO_CONTENT)
    public void deletePost(@PathVariable("id") int postID) {
        postDao.deletePost(postID);
    }
//    Get Posts for Poster
//    ====================
//    URI: /posts/user/{poster_name}
//    HTTP Method: GET
//    RequestBody: None
//    ResponseBody: Array of Post data

   // @GetMapping("/book/{bookId}")
   @RequestMapping(value = "/posts/user/{posterName}", method = RequestMethod.GET)
    @ResponseStatus(HttpStatus.OK)
    public List<Post> getPostsByPosters(@PathVariable("posterName") String posterName) {
        List<Post> posts = postDao.getPostsByPoster(posterName);
//        if (posts != null && posts.size() == 0)
//            throw new IllegalArgumentException("Post is not available for " + posterName);
        return posts;
    }

}
